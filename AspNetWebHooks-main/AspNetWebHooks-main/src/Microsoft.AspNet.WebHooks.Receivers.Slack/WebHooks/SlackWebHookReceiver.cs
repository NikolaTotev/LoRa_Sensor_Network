// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by Slack.
    /// A sample WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/slack/{id}</c>'.
    /// For security reasons, the WebHook URI must be an <c>https</c> URI and the WebHook 'token' parameter
    /// must have the same value as configured in the '<c>MS_WebHookReceiverSecret_Slack</c>' application setting.
    /// For details about Slack WebHooks, see <c>https://api.slack.com/outgoing-webhooks</c>.
    /// </summary>
    public class SlackWebHookReceiver : WebHookReceiver
    {
        internal const string RecName = "slack";
        internal const int SecretMinLength = 16;
        internal const int SecretMaxLength = 128;

        internal const string TokenParameter = "token";
        internal const string TriggerParameter = "trigger_word";
        internal const string CommandParameter = "command";
        internal const string TextParameter = "text";
        internal const string SubtextParameter = "subtext";

        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override string Name
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            if (request.Method == HttpMethod.Post)
            {
                EnsureSecureConnection(request);

                // Read the request entity body
                var data = await ReadAsFormDataAsync(request);

                // Verify that the token is correct
                var token = data[TokenParameter];
                var secretKey = await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);
                if (!WebHookReceiver.SecretEqual(token, secretKey))
                {
                    var message = string.Format(CultureInfo.CurrentCulture, SlackReceiverResources.Receiver_BadToken, TokenParameter);
                    context.Configuration.DependencyResolver.GetLogger().Error(message);
                    var invalidCode = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                    return invalidCode;
                }

                // Get the action by looking for either trigger_word or command parameter
                var action = string.Empty;
                if (data[TriggerParameter] != null)
                {
                    // Trigger parameter was supplied
                    // Get the subtext by removing the trigger word
                    action = data[TriggerParameter];
                    var text = data[TextParameter];
                    data[SubtextParameter] = GetSubtext(action, text);
                }
                else if (data[CommandParameter] != null)
                {
                    // Command parameter was supplied
                    action = data[CommandParameter];
                }
                else
                {
                    // Trigger was omitted as optional
                    // Set the subtext to the full text
                    action = data[TextParameter];
                    data[SubtextParameter] = data[TextParameter];
                }

                if (string.IsNullOrEmpty(action))
                {
                    var message = string.Format(CultureInfo.CurrentCulture, SlackReceiverResources.Receiver_BadBody, CommandParameter, TriggerParameter);
                    context.Configuration.DependencyResolver.GetLogger().Error(message);
                    var badType = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                    return badType;
                }

                // Call registered handlers
                return await ExecuteWebHookAsync(id, context, request, new string[] { action }, data);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

        /// <summary>
        /// The 'text' parameter provided by Slack contains both the trigger and the rest of the phrase. This
        /// isolates just the rest of the phrase making it easier to get in handlers.
        /// </summary>
        /// <param name="trigger">The word triggering this Slack WebHook</param>
        /// <param name="text">The full text containing the trigger word.</param>
        /// <returns>The subtext without the trigger word.</returns>
        internal static string GetSubtext(string trigger, string text)
        {
            return text != null && text.StartsWith(trigger, StringComparison.OrdinalIgnoreCase) ?
                text.Substring(trigger.Length).Trim() :
                text ?? string.Empty;
        }
    }
}
