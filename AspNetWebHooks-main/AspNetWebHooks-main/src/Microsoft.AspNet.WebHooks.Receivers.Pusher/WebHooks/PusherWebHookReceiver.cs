// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;
using Newtonsoft.Json.Linq;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by Pusher.
    /// The '<c>MS_WebHookReceiverSecret_Pusher</c>' application setting contains a semicolon separated list of values
    /// of the form '<c>appKey_appSecret</c>' containing one or more application key/secret pairs defined in Pusher. An example
    /// with two key/secret pairs is '<c>47e5a8cd8f6bb492252a_42fef23870926753d345; ba3af8f38f3be37d476a_9eb6d047bb5465a43cb2</c>'.
    /// The corresponding WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/pusher/{id}</c>'.
    /// For details about Pusher WebHooks, see <c>https://pusher.com/docs/webhooks</c>.
    /// </summary>
    public class PusherWebHookReceiver : WebHookReceiver
    {
        internal const string RecName = "pusher";
        internal const int SecretMinLength = 8;
        internal const int SecretMaxLength = 128;

        internal const string SignatureHeaderName = "X-Pusher-Signature";
        internal const string KeyHeaderName = "X-Pusher-Key";

        internal const string EventsKey = "events";
        internal const string EventNameKey = "name";

        private ConcurrentDictionary<string, IDictionary<string, string>> _secretLookupTable = new ConcurrentDictionary<string, IDictionary<string, string>>();

        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override string Name
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            if (request.Method == HttpMethod.Post)
            {
                var valid = await VerifySignature(id, request);
                if (!valid)
                {
                    return CreateBadSignatureResponse(request, SignatureHeaderName);
                }

                // Read the request entity body
                var data = await ReadAsJsonAsync(request);

                // Get the pusher event actions
                var actions = GetActions(request, data);

                // Call registered handlers
                return await ExecuteWebHookAsync(id, context, request, actions, data);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

        /// <summary>
        /// Verifies that the signature header matches that of the actual body.
        /// </summary>
        protected virtual async Task<bool> VerifySignature(string id, HttpRequestMessage request)
        {
            // Get the expected hash from the signature and app key headers
            var signatureHeaderValue = GetRequestHeader(request, SignatureHeaderName);
            var keyHeaderValue = GetRequestHeader(request, KeyHeaderName);

            // Lookup which secret to use based on key header value
            var lookupTable = await GetSecretLookupTable(id, request);
            if (!lookupTable.TryGetValue(keyHeaderValue, out var secretKey))
            {
                var message = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_SecretNotFound, KeyHeaderName, keyHeaderValue);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message);
                var invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidEncoding);
            }

            byte[] expectedHash;
            try
            {
                expectedHash = EncodingUtilities.FromHex(signatureHeaderValue);
            }
            catch (Exception ex)
            {
                var message = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_BadHeaderEncoding, SignatureHeaderName);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message, ex);
                var invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidEncoding);
            }

            // Get the actual hash of the request body
            byte[] actualHash;
            var secret = Encoding.UTF8.GetBytes(secretKey);
            using (var hasher = new HMACSHA256(secret))
            {
                var data = await request.Content.ReadAsByteArrayAsync();
                actualHash = hasher.ComputeHash(data);
            }

            // Now verify that the provided hash matches the expected hash.
            return WebHookReceiver.SecretEqual(expectedHash, actualHash);
        }

        /// <summary>
        /// Gets the set of tuples containing application key and secret which are used to verify the
        /// validity of an incoming WebHook request.
        /// </summary>
        /// <returns>A look table which allows the application secret to be looked up from a given application key.</returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Disposed by Web API")]
        protected virtual async Task<IDictionary<string, string>> GetSecretLookupTable(string id, HttpRequestMessage request)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            if (_secretLookupTable.TryGetValue(id, out var lookupTable))
            {
                return lookupTable;
            }

            var keySecretPairs = await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);
            lookupTable = new Dictionary<string, string>();
            foreach (var keySecretPair in keySecretPairs.SplitAndTrim(';'))
            {
                var parts = keySecretPair.SplitAndTrim('_');
                if (parts == null || parts.Length != 2)
                {
                    var message = PusherReceiverResources.Recevier_BadSecret;
                    request.GetConfiguration().DependencyResolver.GetLogger().Error(message);
                    var invalidSecret = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                    throw new HttpResponseException(invalidSecret);
                }
                lookupTable.Add(parts[0], parts[1]);
            }

            if (lookupTable.Count == 0)
            {
                var message = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_NoSecrets, typeof(PusherWebHookReceiver).Name);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message);
                var invalidSecret = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidSecret);
            }

            _secretLookupTable.TryAdd(id, lookupTable);
            return lookupTable;
        }

        /// <summary>
        /// Gets the notification actions form the given <paramref name="data"/>.
        /// </summary>
        /// <param name="request">The current <see cref="HttpRequestMessage"/>.</param>
        /// <param name="data">The request body.</param>
        /// <returns>A collection of actions.</returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Response is disposed by infrastructure.")]
        protected virtual IEnumerable<string> GetActions(HttpRequestMessage request, JObject data)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            try
            {
                var actions = new List<string>();
                var events = data.Value<JArray>(EventsKey);
                if (events != null)
                {
                    foreach (JObject e in events)
                    {
                        var action = e.Value<string>(EventNameKey);
                        if (action != null)
                        {
                            actions.Add(action);
                        }
                    }
                }
                return actions;
            }
            catch (Exception ex)
            {
                var message = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_BadEvent, ex.Message);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message, ex);
                var invalidData = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidData);
            }
        }
    }
}
