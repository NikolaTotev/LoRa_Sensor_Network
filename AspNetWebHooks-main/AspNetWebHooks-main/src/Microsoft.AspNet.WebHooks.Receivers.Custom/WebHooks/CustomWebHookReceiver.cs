// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;
using Newtonsoft.Json.Linq;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation that can be used to receive WebHooks from parties
    /// supporting WebHooks generated by the ASP.NET Custom WebHooks module.
    /// Set the '<c>MS_WebHookReceiverSecret_Custom</c>' application setting to the application secrets, optionally using IDs
    /// to differentiate between multiple WebHooks, for example '<c>secret0, id1=secret1,id2=secret2</c>'.
    /// The corresponding WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/custom/{id}</c>'.
    /// </summary>
    public class CustomWebHookReceiver : WebHookReceiver
    {
        internal const string RecName = "custom";
        internal const int SecretMinLength = 32;
        internal const int SecretMaxLength = 128;

        internal const string EchoParameter = "echo";
        internal const string SignatureHeaderKey = "sha256";
        internal const string SignatureHeaderValueTemplate = SignatureHeaderKey + "={0}";
        internal const string SignatureHeaderName = "ms-signature";

        internal const string NotificationsKey = "Notifications";
        internal const string ActionKey = "Action";

        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override string Name
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            if (request.Method == HttpMethod.Post)
            {
                await VerifySignature(id, request);

                // Read the request entity body
                var data = await ReadAsJsonAsync(request);

                // Get the event actions
                var actions = GetActions(data, request);

                // Call registered handlers
                return await ExecuteWebHookAsync(id, context, request, actions, data);
            }
            else if (request.Method == HttpMethod.Get)
            {
                return await WebHookVerification(id, request);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

        /// <summary>
        /// Verifies that the signature header matches that of the actual body.
        /// </summary>
        protected virtual async Task VerifySignature(string id, HttpRequestMessage request)
        {
            var secretKey = await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);

            // Get the expected hash from the signature header
            var header = GetRequestHeader(request, SignatureHeaderName);
            var values = header.SplitAndTrim('=');
            if (values.Length != 2 || !string.Equals(values[0], SignatureHeaderKey, StringComparison.OrdinalIgnoreCase))
            {
                var message = string.Format(CultureInfo.CurrentCulture, CustomReceiverResources.Receiver_BadHeaderValue, SignatureHeaderName, SignatureHeaderKey, "<value>");
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message);
                var invalidHeader = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidHeader);
            }

            byte[] expectedHash;
            try
            {
                expectedHash = EncodingUtilities.FromHex(values[1]);
            }
            catch (Exception ex)
            {
                var message = string.Format(CultureInfo.CurrentCulture, CustomReceiverResources.Receiver_BadHeaderEncoding, SignatureHeaderName);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message, ex);
                var invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidEncoding);
            }

            // Compute the actual hash of the request body
            byte[] actualHash;
            var secret = Encoding.UTF8.GetBytes(secretKey);
            using (var hasher = new HMACSHA256(secret))
            {
                var data = await request.Content.ReadAsByteArrayAsync();
                actualHash = hasher.ComputeHash(data);
            }

            // Now verify that the actual hash matches the expected hash.
            if (!WebHookReceiver.SecretEqual(expectedHash, actualHash))
            {
                var badSignature = CreateBadSignatureResponse(request, SignatureHeaderName);
                throw new HttpResponseException(badSignature);
            }
        }

        /// <summary>
        /// Creates a response to a WebHook verification GET request.
        /// </summary>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Disposed by caller")]
        protected virtual async Task<HttpResponseMessage> WebHookVerification(string id, HttpRequestMessage request)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            // Verify that we have the secret as an app setting
            await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);

            // Get the 'echo' parameter and echo it back to caller
            var queryParameters = request.RequestUri.ParseQueryString();
            var echo = queryParameters[EchoParameter];
            if (string.IsNullOrEmpty(echo))
            {
                var message = string.Format(CultureInfo.CurrentCulture, CustomReceiverResources.Receiver_NoEcho, EchoParameter);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message);
                var noEcho = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                return noEcho;
            }

            // Return the echo response
            var echoResponse = request.CreateResponse();
            echoResponse.Content = new StringContent(echo);
            return echoResponse;
        }

        /// <summary>
        /// Gets the notification actions form the given <paramref name="data"/>.
        /// </summary>
        /// <param name="data">The request body.</param>
        /// <param name="request">The current <see cref="HttpRequestMessage"/>.</param>
        /// <returns>A collection of actions.</returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Response is disposed by infrastructure.")]
        protected virtual IEnumerable<string> GetActions(JObject data, HttpRequestMessage request)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            try
            {
                var actions = new List<string>();
                var notifications = data.Value<JArray>(NotificationsKey);
                if (notifications != null)
                {
                    foreach (JObject e in notifications)
                    {
                        var action = e.Value<string>(ActionKey);
                        if (action != null)
                        {
                            actions.Add(action);
                        }
                    }
                }
                return actions;
            }
            catch (Exception ex)
            {
                var message = string.Format(CultureInfo.CurrentCulture, CustomReceiverResources.Receiver_BadEvent, ex.Message);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(message, ex);
                var invalidData = request.CreateErrorResponse(HttpStatusCode.BadRequest, message);
                throw new HttpResponseException(invalidData);
            }
        }
    }
}
