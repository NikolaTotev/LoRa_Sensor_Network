{"version":3,"sources":["components/Header.tsx","contexts/ServerSocket.tsx","components/Loading.tsx","pages/Home.tsx","hooks/useAsync.ts","errors/HttpError.ts","services/HttpService.ts","services/StationService.ts","components/Charts.tsx","pages/Stations.tsx","pages/History.tsx","App.tsx","index.tsx"],"names":["pages","name","link","Header","React","useState","anchorElNav","setAnchorElNav","navigate","useNavigate","handleCloseNavMenuAndRedirect","AppBar","position","Container","maxWidth","Toolbar","disableGutters","Typography","variant","noWrap","component","sx","mr","display","xs","md","Box","flexGrow","IconButton","size","onClick","event","currentTarget","color","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","textAlign","Button","my","ServerSocketContext","createContext","ServerSocketProvider","children","loading","setLoading","hubConnection","signalR","withUrl","skipNegotiation","transport","WebSockets","configureLogging","Information","withAutomaticReconnect","build","useEffect","state","start","then","a","Provider","value","socket","useSocket","useContext","Loading","error","m","CircularProgress","message","Home","averageTemperature","averageHumidity","lastUpdate","averageData","setAverageData","on","invoke","alignItems","flexFlow","marginTop","gutterBottom","align","fontWeight","useAsync","action","dependencies","data","setState","reload","isCancelled","result","Error","HttpError","response","body","status","stack","this","HttpService","baseUrl","path","request","method","headers","JSON","stringify","options","fetch","ok","json","responseBody","httpService","StationService","get","startDate","endDate","stationId","stationService","Charts","stations","typesOfMeasurement","Promise","all","station","neededMeasurements","getSupportedMeasurements","supportedMeasurements","filter","measurement","includes","getSensorReadingsWindowed","toISOString","stationID","readings","stationReads","stationReadings","measurements","parse","chartData","setChartData","forEach","stationReading","reading","payload","neededResult","Date","push","length","Paper","type","factory","scaleLinear","scaleTime","scaleName","showGrid","showLine","stationName","valueField","argumentField","flat","Stations","getStationList","stationList","selectedIndex","setSelectedIndex","selectedMeasurment","setSelectedMeasurement","liveData","setLiveData","setStartDate","setEndDate","generatedChart","setGeneratedChart","selectedMeasurementArray","setSelectedMeasurementArray","selectedStationArray","setSelectedStationArray","handleSelectMeasurment","target","handleClick","Stack","direction","spacing","border","borderRadius","boxShadow","padding","List","index","ListItemButton","selected","handleListItemClick","ListItemText","primary","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","onChange","newValue","maxDate","renderInput","params","TextField","minDate","select","helperText","option","disabled","flexDirection","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","onlyUnique","self","indexOf","getStyles","theme","typography","fontWeightRegular","fontWeightMedium","History","allMeasurements","setAllMeasurements","selectedMeasurements","setSelectedMeasurements","useTheme","handleChange","split","FormControl","InputLabel","Select","labelId","multiple","input","OutlinedInput","renderValue","flexWrap","gap","Chip","App","CssBaseline","element","replace","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25c0f7e9.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Menu from '@mui/material/Menu';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport { useNavigate } from \"react-router-dom\";\n\nconst pages = [\n  {name: 'Home', link: '/home'},\n  {name: 'Stations', link: '/stations'},\n  {name: 'History', link: '/history'}\n];\n\nexport default function Header() {\n  const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);\n  const navigate = useNavigate();\n\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorElNav(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  const handleCloseNavMenuAndRedirect = (link: string) => {\n    setAnchorElNav(null);\n    navigate(link);\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ mr: 5, display: { xs: 'none', md: 'flex' } }}\n          >\n            LoRa Sensor Network\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <MenuItem key={page.name} onClick={() => handleCloseNavMenuAndRedirect(page.link)}>\n                  <Typography textAlign=\"center\">{page.name}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n          >\n            LoRa Sensor Network\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <Button\n                key={page.name}\n                onClick={() => handleCloseNavMenuAndRedirect(page.link)}\n                sx={{ my: 2, color: 'white', display: 'block' }}\n              >\n                {page.name}\n              </Button>\n            ))}\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n}\n","import React, { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport * as signalR from \"@microsoft/signalr\";\r\nimport env from \"react-dotenv\";\r\n\r\ninterface ServerSocketProps {\r\n  socket: signalR.HubConnection;\r\n  loading: boolean;\r\n}\r\n\r\nconst ServerSocketContext = createContext<ServerSocketProps>(null as any);\r\n\r\ninterface ServerSocketProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function ServerSocketProvider({children}: ServerSocketProviderProps) {\r\n  const ENDPOINT = `https://nikolatotev-001-site1.ctempurl.com/socket`;\r\n  const [ loading, setLoading ] = useState(true);\r\n\r\n  const hubConnection = new signalR.HubConnectionBuilder()\r\n    .withUrl(ENDPOINT, {\r\n      skipNegotiation: true,\r\n      transport: signalR.HttpTransportType.WebSockets\r\n    })\r\n    .configureLogging(signalR.LogLevel.Information)\r\n    .withAutomaticReconnect()\r\n    .build();\r\n\r\n  useEffect(() => {\r\n    if (hubConnection.state !== 'Connected') {\r\n      hubConnection.start().then(a => {\r\n        setLoading(false);\r\n      });\r\n    }\r\n  })\r\n\r\n  return (\r\n    <ServerSocketContext.Provider value={{socket: hubConnection, loading}}>\r\n      { children }\r\n    </ServerSocketContext.Provider>\r\n  )\r\n}\r\n\r\nexport default function useSocket() {\r\n  return useContext(ServerSocketContext);\r\n}\r\n","import { Box, CircularProgress } from '@mui/material';\r\nimport React, { ReactNode } from 'react';\r\n\r\ninterface LoadingProps {\r\n  loading: boolean;\r\n  error: Error | null;\r\n  children: () => ReactNode;\r\n}\r\n\r\nexport default function Loading( { loading, error, children }: LoadingProps) {\r\n  if (loading) {\r\n    return (\r\n      <Box m={4} textAlign=\"center\" >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box m={4} textAlign=\"center\">{error.message}</Box>\r\n    );\r\n  }\r\n\r\n  return <>{children()}</>;\r\n}","import { Container, Typography } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Loading from \"../components/Loading\";\r\nimport useSocket from \"../contexts/ServerSocket\";\r\n\r\ninterface AverageData {\r\n  averageTemperature: string;\r\n  averageHumidity: string;\r\n  lastUpdate: string;\r\n}\r\n\r\nexport default function Home() {\r\n  const { socket: hubConnection } = useSocket();\r\n  \r\n  const [ averageData, setAverageData ] = useState<AverageData>({\r\n    averageTemperature: \"\",\r\n    averageHumidity: \"\",\r\n    lastUpdate: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    hubConnection.on(\"SetAverageData\", message => {\r\n      setAverageData(message);\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (hubConnection.state === 'Connected') {\r\n      hubConnection.invoke(\"SendAverageData\");\r\n    }\r\n  });\r\n\r\n  return (<>\r\n    <Loading loading={averageData.lastUpdate === \"\"} error={null}>\r\n      {() => (<Container maxWidth=\"md\" sx={{display: 'flex', alignItems: 'center', flexFlow: 'column', marginTop: 3}}>\r\n        <Typography variant=\"h2\" gutterBottom component=\"div\" sx={{color: '#0d47a1'}}>\r\n          Sofia\r\n        </Typography>\r\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\r\n          Last update:\r\n        </Typography>\r\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\r\n          {averageData.lastUpdate}\r\n        </Typography>\r\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\r\n          Avg. Temperature\r\n        </Typography>\r\n        <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{fontWeight: 'bold', color: '#0d47a1'}}>\r\n          {averageData.averageTemperature} °C\r\n        </Typography>\r\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\r\n          Avg. Humidity\r\n        </Typography>\r\n        <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{fontWeight: 'bold', color: '#0d47a1'}}>\r\n          {averageData.averageHumidity} %\r\n        </Typography>\r\n        </Container>)}\r\n    </Loading>\r\n  </>);\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\ninterface AsyncState<T> {\r\n  data: T | null;\r\n  loading: boolean;\r\n  error: Error | null;\r\n}\r\n\r\nexport default function useAsync<T>(action: () => Promise<T>, dependencies: any[]) {\r\n  const [state, setState] = useState<AsyncState<T>>({\r\n    data: null,\r\n    loading: true,\r\n    error: null\r\n  });\r\n\r\n  const reload = () => {\r\n    let isCancelled = false;\r\n    (async function () {\r\n      try {\r\n        setState({data: null, loading: true, error: null});\r\n        const result = await action();\r\n\r\n        if (!isCancelled) {\r\n          setState({data: result, loading: false, error: null});\r\n        }\r\n      } catch (error: unknown) {\r\n        if (error instanceof Error && !isCancelled) {\r\n          setState({data: null, loading: false, error});\r\n        }\r\n      }\r\n    })();\r\n\r\n    return (() => {isCancelled = true;});\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  useEffect(reload, dependencies);\r\n\r\n  return {...state, reload};\r\n}\r\n","abstract class BaseError {\r\n  abstract name: string;\r\n\r\n  stack: string | undefined;\r\n\r\n  constructor(public message: string) {\r\n    this.stack = new Error().stack;\r\n  }\r\n}\r\n\r\nexport default class HttpError extends BaseError {\r\n  name: string;\r\n\r\n  constructor(response: Response, body: any) {\r\n    const message = body?.message || `Received status code ${response.status}`;\r\n\r\n    super(message);\r\n    this.name = body?.error.name || 'HttpError';\r\n  }\r\n}\r\n","import env from \"react-dotenv\";\r\nimport HttpError from \"../errors/HttpError\";\r\n\r\nclass HttpService {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  get<T>(path: string) {\r\n    return this.request<T>(path, {\r\n      method: 'GET'\r\n    });\r\n  }\r\n\r\n  post<T>(path: string, body: {[key: string]: any}) {\r\n    return this.request<T>(path, {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n  }\r\n\r\n  private async request<T>(path: string, options: RequestInit): Promise<T> {\r\n    const response = await fetch(`${this.baseUrl}/${path}`, options);\r\n\r\n    if (!response.ok) {\r\n      throw new HttpError(response, await response.json());\r\n    }\r\n\r\n    const responseBody = response.json();\r\n\r\n    return responseBody\r\n  }\r\n}\r\n\r\nconst httpService = new HttpService('https://nikolatotev-001-site1.ctempurl.com');\r\nexport default httpService;\r\n","import httpService from \"./HttpService\";\r\n\r\nexport interface LatestSensorReading {\r\n  averageHumidity: string;\r\n  averageTemperature: string;\r\n  lastUpdate: string;\r\n}\r\n\r\nexport interface Station {\r\n  dateCreated: string; // \"Monday, January 10, 2022\"\r\n  devAddr: string; // \"260BA563\"\r\n  joinEUI: string; //\"70B3D57ED0032B07\"\r\n  lastSeen: string; //\"2022-01-13T20:04:08.153\"\r\n  latitude: number; //43\r\n  longitude: number; //23\r\n  numberOfMessages: number; //1\r\n  stationID: string; //\"eui-a8610a3032306f09\"\r\n  stationName: string; //\"Station-1\"\r\n  supportedMeasurements: string; // \"breathVocEquivalent\", \"co2Equivalent\", \"humidity\", \"iaq\", \"iaqAccuracy\", \"pressure\", \"staticIaq\",\"temperature\"\r\n}\r\n\r\nexport interface Reading {\r\n  originID: string; //\"eui-a8610a3032306f09\"\r\n  payload: string; //\"{\\r\\n  \\\"breathVocEquivalent\\\": \\\"0.53\\\",\\r\\n  \\\"co2Equivalent\\\": \\\"517.50\\\",\\r\\n  \\\"humidity\\\": \\\"37.82\\\",\\r\\n  \\\"iaq\\\": \\\"35.02\\\",\\r\\n  \\\"iaqAccuracy\\\": \\\"0\\\",\\r\\n  \\\"pressure\\\": \\\"94928.00\\\",\\r\\n  \\\"staticIaq\\\": \\\"29.38\\\",\\r\\n  \\\"temperature\\\": \\\"20.61\\\"\\r\\n}\"\r\n  readingID: string; // \"b78655e0-5f8f-45f2-aede-1084cecd599a\"\r\n  timeOfCapture: Date; //\"2022-01-18T00:40:41.697\"\r\n}\r\n\r\nclass StationService {\r\n  async getStationReadings() {\r\n    return httpService.get<LatestSensorReading>('api/SensorReadings');\r\n  }\r\n\r\n  async getStationList() {\r\n    return httpService.get<Station[]>('api/GetStationList');\r\n  }\r\n\r\n  async getSensorReadingsWindowed(startDate: string, endDate: string, stationId: string) {\r\n    return httpService.get<Reading[]>(`api/StationSensorReadingsWindowed?startDate=${startDate}&endDate=${endDate}&stationId=${stationId}`);\r\n  }\r\n}\r\n\r\nconst stationService = new StationService();\r\nexport default stationService;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport {\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n  Chart,\r\n  LineSeries,\r\n  Legend,\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { ArgumentScale, ValueScale } from '@devexpress/dx-react-chart';\r\nimport { scaleLinear, scaleTime } from 'd3-scale';\r\nimport stationService, { Reading, Station } from '../services/StationService';\r\nimport useAsync from '../hooks/useAsync';\r\nimport Loading from './Loading';\r\n\r\ninterface ChartsProps {\r\n  stations: Station[];\r\n  typesOfMeasurement: string[];\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n\r\ninterface StationReading {\r\n  station: Station;\r\n  readings: Reading[];\r\n  neededMeasurements: string[];\r\n}\r\n\r\nexport default function Charts({ stations, typesOfMeasurement, startDate, endDate }: ChartsProps) {\r\n  const { data: stationReadings, loading, error } = useAsync<StationReading[]>(async () => {\r\n    let stationReads = await Promise.all(stations.map(async (station) => {\r\n      const neededMeasurements = getSupportedMeasurements(station.supportedMeasurements).filter((measurement: any) => typesOfMeasurement.includes(measurement));\r\n      const readings = await stationService.getSensorReadingsWindowed(startDate.toISOString(), endDate.toISOString(), station.stationID);\r\n      return {\r\n        station,\r\n        readings,\r\n        neededMeasurements\r\n      }\r\n    }));\r\n\r\n    return stationReads;\r\n  }, [stations, typesOfMeasurement, startDate, endDate]);\r\n\r\n  function getSupportedMeasurements(measurements: string): any {\r\n    const result: any = JSON.parse(measurements);\r\n    return result;\r\n  }\r\n\r\n  const [chartData, setChartData] = useState<any[]>([]);\r\n  \r\n  useEffect(() => {\r\n    if (stationReadings) {\r\n      const data: any[] = [];\r\n      stationReadings.forEach((stationReading) => {\r\n        stationReading.readings.forEach((reading) => {\r\n          const payload = getSupportedMeasurements(reading.payload);\r\n          const neededResult: {[key: string]: any} = {};\r\n          stationReading.neededMeasurements.forEach((measurement) => {\r\n            neededResult[`${stationReading.station.stationID}-${measurement}`] = payload[measurement];\r\n          })\r\n          neededResult[\"timeOfCapture\"] = new Date(reading[\"timeOfCapture\"]);\r\n          data.push(neededResult);\r\n        })\r\n      });\r\n\r\n      setChartData(data);\r\n    }\r\n  }, [stationReadings]);\r\n\r\n  return (\r\n    <Loading loading={loading} error={error}>\r\n      {() => (chartData.length > 0 && <>\r\n    <Paper>\r\n      <Chart\r\n        data={chartData}\r\n      >\r\n        {typesOfMeasurement.map((type) => <ValueScale factory={scaleLinear} name={type} key={`scale-${type}`} />)}\r\n        {/* <ValueScale name=\"scale\" /> */}\r\n        <ArgumentScale factory={scaleTime} />\r\n        <ArgumentAxis />\r\n        {typesOfMeasurement.map((type) => <ValueAxis scaleName={type} showGrid={false} showLine={true} key={`axis-${type}`}/>)}\r\n        {/* <ValueAxis scaleName=\"scale\" position=\"right\" showGrid={false} showLine={true} showTicks={true} /> */}\r\n\r\n        {stationReadings && stationReadings.map((stationReading) => (\r\n          stationReading.neededMeasurements.map((measurement) => (\r\n            <LineSeries\r\n              name={`${stationReading.station.stationName}  ${measurement}`}\r\n              valueField={`${stationReading.station.stationID}-${measurement}`}\r\n              scaleName={measurement}\r\n              argumentField='timeOfCapture'\r\n              key={`${stationReading.station.stationName}  ${measurement}`}\r\n            />\r\n          )))).flat(1)}\r\n\r\n        <Legend position=\"bottom\" />\r\n      </Chart>\r\n    </Paper>\r\n      </>)}\r\n    </Loading>\r\n  );\r\n}\r\n","import { Box, Typography, List, ListItemButton, ListItemText, TextField, MenuItem, Button, Container, Stack } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Loading from \"../components/Loading\";\r\nimport useSocket from \"../contexts/ServerSocket\";\r\nimport useAsync from \"../hooks/useAsync\";\r\nimport stationService, { Station } from \"../services/StationService\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport Charts from \"../components/Charts\";\r\n\r\nexport default function Stations() {\r\n  const { data: stationList, loading, error } = useAsync(() => stationService.getStationList(), []);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  const [selectedMeasurment, setSelectedMeasurement] = useState(\"\");\r\n  const { socket: hubConnection } = useSocket();\r\n  const [ liveData, setLiveData ] = useState(\"\");\r\n  const [startDate, setStartDate] = useState<Date | null>(new Date());\r\n  const [endDate, setEndDate] = useState<Date | null>(new Date());\r\n  const [generatedChart, setGeneratedChart] = useState(false);\r\n  const [selectedMeasurementArray, setSelectedMeasurementArray] = useState<string[]>([]);\r\n  const [selectedStationArray, setSelectedStationArray] = useState<Station[]>([]); \r\n  \r\n  function getSupportedMeasurements(measurements: string): string[] {\r\n    const result: any = JSON.parse(measurements);\r\n    return result;\r\n  }\r\n\r\n  useEffect(() => {\r\n    hubConnection.on(\"SetLatestReading\", message => {\r\n      if (hubConnection.state === 'Connected' \r\n        && selectedIndex !== -1 \r\n        && stationList\r\n        && stationList[selectedIndex] \r\n        && selectedMeasurment !== \"\") {\r\n          const result: any = JSON.parse(message.payload);\r\n          setLiveData(result[selectedMeasurment]);\r\n      }\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (hubConnection.state === 'Connected' \r\n    && selectedIndex !== -1 \r\n    && stationList \r\n    && stationList[selectedIndex] \r\n    && selectedMeasurment !== \"\") {\r\n      hubConnection.invoke(\"SendLatestReading\", stationList[selectedIndex].stationID);\r\n    }\r\n  });\r\n\r\n  const handleListItemClick = (\r\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    index: number,\r\n  ) => {\r\n    setSelectedIndex(index);\r\n  };\r\n\r\n  const handleSelectMeasurment = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSelectedMeasurement(event.target.value);\r\n    setGeneratedChart(false);\r\n    setLiveData('');\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (endDate && startDate && stationList && stationList[selectedIndex] && selectedMeasurment !== '') {\r\n      setGeneratedChart(true);\r\n      setSelectedMeasurementArray([selectedMeasurment]);\r\n      setSelectedStationArray([stationList[selectedIndex]]);\r\n    }\r\n  };\r\n\r\nreturn (<Container maxWidth=\"lg\">\r\n<Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1', marginTop: 2}}>\r\n  Stations\r\n </Typography>\r\n<Loading loading={loading} error={error}>\r\n   {() => (stationList && <Stack direction=\"row\" spacing={2} sx={{marginTop: 3, border: '1 solid gray.500', borderRadius: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', padding: 3}}>\r\n     <Stack direction=\"column\" spacing={3} sx={{marginTop: 2}}>\r\n        <List component=\"nav\">\r\n          {stationList?.map((station, index) => (\r\n            <ListItemButton\r\n              selected={selectedIndex === index}\r\n              onClick={(event) => handleListItemClick(event, index)}\r\n              key={station.stationID}\r\n            >\r\n              <ListItemText primary={station.stationName} />\r\n            </ListItemButton>))}\r\n        </List>\r\n       {stationList && selectedIndex!== -1 && <><LocalizationProvider dateAdapter={AdapterDateFns}>\r\n         <DatePicker\r\n           label=\"Start Date\"\r\n           value={startDate}\r\n           onChange={(newValue) => {\r\n             setGeneratedChart(false);\r\n             setStartDate(newValue);\r\n           }}\r\n           maxDate={endDate}\r\n           renderInput={(params) => <TextField {...params} />}\r\n         />\r\n         <DatePicker\r\n           label=\"End Date\"\r\n           value={endDate}\r\n           onChange={(newValue) => {\r\n             setGeneratedChart(false);\r\n             setEndDate(newValue);\r\n           }}\r\n           maxDate={new Date()}\r\n           minDate={startDate}\r\n           renderInput={(params) => <TextField {...params} />}\r\n         />\r\n       </LocalizationProvider>\r\n       <TextField\r\n          id=\"measurement\"\r\n          select\r\n          label=\"Select\"\r\n          value={selectedMeasurment}\r\n          onChange={handleSelectMeasurment}\r\n          helperText=\"Please select type of measurement\"\r\n        >\r\n          {getSupportedMeasurements(stationList[selectedIndex]!.supportedMeasurements).map((option) => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n   <Button variant=\"outlined\" onClick={handleClick} disabled={generatedChart}>Generate Chart</Button>\r\n            </>}\r\n     </Stack>\r\n     <Box sx={{flexGrow: 1, display: 'flex', flexDirection: 'column'}}>\r\n     {selectedIndex !== -1 && stationList && stationList[selectedIndex] && selectedMeasurment !== \"\" && <>\r\n    <Loading loading={liveData === ''} error={null}>\r\n      {() => <>\r\n        <Typography variant=\"h4\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\r\n          Live data: {liveData}\r\n        </Typography>\r\n      </>}\r\n    </Loading>\r\n    </>}\r\n    {generatedChart && <Box sx={{flexGrow: 1}}><Charts startDate={startDate!} endDate={endDate!} typesOfMeasurement={selectedMeasurementArray} stations={selectedStationArray}/></Box>}\r\n     </Box>\r\n   </Stack>)}\r\n</Loading>\r\n</Container>);\r\n}\r\n","import { TextField, Typography, MenuItem, Select, Box, SelectChangeEvent, OutlinedInput, InputLabel, FormControl, Button, Container, Stack } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport useAsync from \"../hooks/useAsync\";\r\nimport stationService from \"../services/StationService\";\r\nimport Loading from \"../components/Loading\";\r\nimport Chip from '@mui/material/Chip';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport Charts from \"../components/Charts\";\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction onlyUnique(value: any, index: any, self: any) {\r\n  return self.indexOf(value) === index;\r\n}\r\n\r\nfunction getStyles(name: string, measurement: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight:\r\n      measurement.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function History() {\r\n  const [startDate, setStartDate] = useState<Date | null>(new Date());\r\n  const [endDate, setEndDate] = useState<Date | null>(new Date());\r\n  const { data: stationList, loading, error } = useAsync(() => stationService.getStationList(), []);\r\n  const [ allMeasurements, setAllMeasurements ] = useState<string[]>([]);\r\n  const [selectedMeasurements, setSelectedMeasurements] = useState<string[]>([]);\r\n  const [generatedChart, setGeneratedChart] = useState(false);\r\n  const theme = useTheme();\r\n\r\n  function getSupportedMeasurements(measurements: string): string[] {\r\n    const result: any = JSON.parse(measurements);\r\n    return result;\r\n  }\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof selectedMeasurements>) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setGeneratedChart(false);\r\n    setSelectedMeasurements(\r\n      // On autofill we get a stringified value.\r\n      typeof value === 'string' ? value.split(',') : value,\r\n    );\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (endDate && startDate && stationList && stationList.length > 0 && selectedMeasurements.length > 0) {\r\n      setGeneratedChart(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!stationList || !stationList.length) {\r\n      return;\r\n    }\r\n\r\n    let measurements = stationList\r\n      .map((station) => getSupportedMeasurements(station.supportedMeasurements))\r\n      .flat(1)\r\n      .filter(onlyUnique);\r\n    \r\n    setAllMeasurements(measurements);\r\n  }, [stationList]);\r\n\r\n  return (<Container maxWidth=\"lg\">\r\n     <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1', marginTop: 2}}>\r\n       History\r\n      </Typography>\r\n     <Loading loading={loading} error={error}>\r\n        {() => (<Stack direction=\"row\" spacing={2} sx={{marginTop: 3, border: '1 solid gray.500', borderRadius: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', padding: 3}}>\r\n          <Stack direction=\"column\" spacing={3} sx={{marginTop: 2}}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"Start Date\"\r\n                value={startDate}\r\n                onChange={(newValue) => {\r\n                  setGeneratedChart(false);\r\n                  setStartDate(newValue);\r\n                }}\r\n                maxDate={endDate}\r\n                renderInput={(params) => <TextField {...params} />}\r\n              />\r\n              <DatePicker\r\n                label=\"End Date\"\r\n                value={endDate}\r\n                onChange={(newValue) => {\r\n                  setGeneratedChart(false);\r\n                  setEndDate(newValue);\r\n                }}\r\n                maxDate={new Date()}\r\n                minDate={startDate}\r\n                renderInput={(params) => <TextField {...params} />}\r\n              />\r\n            </LocalizationProvider>\r\n            <FormControl sx={{width: 300 }}>\r\n              <InputLabel id=\"multiple-chip-label\">Type</InputLabel>\r\n              <Select\r\n                labelId=\"multiple-chip-label\"\r\n                id=\"multiple-chip\"\r\n                multiple\r\n                value={selectedMeasurements}\r\n                onChange={handleChange}\r\n                input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\r\n                renderValue={(selectedMeasurements) => (\r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                    {selectedMeasurements.map((value) => (\r\n                      <Chip key={value} label={value} />\r\n                    ))}\r\n                  </Box>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n              {allMeasurements.map((measurement) => (\r\n                <MenuItem\r\n                  key={measurement}\r\n                  value={measurement}\r\n                  style={getStyles(measurement, selectedMeasurements, theme)}\r\n                >\r\n                  {measurement}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n        </FormControl>\r\n        <Button variant=\"outlined\" onClick={handleClick} disabled={generatedChart}>Generate Chart</Button>\r\n          </Stack>\r\n        {generatedChart && <Box sx={{flexGrow: 1}}><Charts startDate={startDate!} endDate={endDate!} typesOfMeasurement={selectedMeasurements} stations={stationList!}/></Box>}\r\n        </Stack>)}\r\n     </Loading>\r\n   </Container>);\r\n}\r\n","import React from 'react';\nimport Header from './components/Header';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport { CssBaseline } from '@mui/material';\nimport { ServerSocketProvider } from './contexts/ServerSocket';\nimport Home from './pages/Home';\nimport Stations from './pages/Stations';\nimport History from './pages/History';\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ServerSocketProvider>\n        <CssBaseline />\n        <Header />\n        <Routes>\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/history\" element={<History />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"*\" element={<Navigate replace to=\"/home\" />} />\n        </Routes>\n      </ServerSocketProvider>\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}