{"version":3,"sources":["components/Header.tsx","contexts/ServerSocket.tsx","components/Loading.tsx","pages/Home.tsx","hooks/useAsync.ts","errors/HttpError.ts","services/HttpService.ts","services/StationService.ts","components/Charts.tsx","pages/Stations.tsx","pages/History.tsx","App.tsx","index.tsx"],"names":["pages","name","link","Header","React","useState","anchorElNav","setAnchorElNav","navigate","useNavigate","handleCloseNavMenuAndRedirect","AppBar","position","Container","maxWidth","Toolbar","disableGutters","Typography","variant","noWrap","component","sx","mr","display","xs","md","Box","flexGrow","IconButton","size","onClick","event","currentTarget","color","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","map","page","MenuItem","textAlign","Button","my","ServerSocketContext","createContext","ServerSocketProvider","children","ENDPOINT","env","API_URL","loading","setLoading","hubConnection","signalR","withUrl","skipNegotiation","transport","WebSockets","withAutomaticReconnect","build","useEffect","state","start","then","a","Provider","value","socket","useSocket","useContext","Loading","error","m","CircularProgress","message","Home","averageTemperature","averageHumidity","lastUpdate","averageData","setAverageData","on","invoke","alignItems","flexFlow","marginTop","gutterBottom","align","fontWeight","useAsync","action","dependencies","data","setState","reload","isCancelled","result","Error","HttpError","response","body","status","stack","this","HttpService","baseUrl","path","request","method","headers","JSON","stringify","options","fetch","ok","json","responseBody","httpService","StationService","get","startDate","endDate","stationId","stationService","Charts","stations","typesOfMeasurement","Promise","all","station","neededMeasurements","getSupportedMeasurements","supportedMeasurements","filter","measurement","includes","getSensorReadingsWindowed","toISOString","stationID","readings","stationReads","stationReadings","measurements","parse","chartData","setChartData","forEach","stationReading","reading","payload","neededResult","Date","push","length","Paper","type","factory","scaleLinear","scaleTime","scaleName","showGrid","showLine","stationName","valueField","argumentField","flat","Stations","getStationList","stationList","selectedIndex","setSelectedIndex","selectedMeasurment","setSelectedMeasurement","liveData","setLiveData","setStartDate","setEndDate","generatedChart","setGeneratedChart","selectedMeasurementArray","setSelectedMeasurementArray","selectedStationArray","setSelectedStationArray","handleSelectMeasurment","target","handleClick","Stack","direction","spacing","border","borderRadius","boxShadow","padding","List","index","ListItemButton","selected","handleListItemClick","ListItemText","primary","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","onChange","newValue","maxDate","renderInput","params","TextField","minDate","select","helperText","option","disabled","flexDirection","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","onlyUnique","self","indexOf","getStyles","theme","typography","fontWeightRegular","fontWeightMedium","History","allMeasurements","setAllMeasurements","selectedMeasurements","setSelectedMeasurements","useTheme","handleChange","split","FormControl","InputLabel","Select","labelId","multiple","input","OutlinedInput","renderValue","flexWrap","gap","Chip","App","CssBaseline","element","replace","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32a238ff.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Menu from '@mui/material/Menu';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport { useNavigate } from \"react-router-dom\";\n\nconst pages = [\n  {name: 'Home', link: '/home'},\n  {name: 'Stations', link: '/stations'},\n  {name: 'History', link: '/history'}\n];\n\nexport default function Header() {\n  const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);\n  const navigate = useNavigate();\n\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorElNav(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  const handleCloseNavMenuAndRedirect = (link: string) => {\n    setAnchorElNav(null);\n    navigate(link);\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ mr: 5, display: { xs: 'none', md: 'flex' } }}\n          >\n            LoRa Sensor Network\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <MenuItem key={page.name} onClick={() => handleCloseNavMenuAndRedirect(page.link)}>\n                  <Typography textAlign=\"center\">{page.name}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n          >\n            LoRa Sensor Network\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <Button\n                key={page.name}\n                onClick={() => handleCloseNavMenuAndRedirect(page.link)}\n                sx={{ my: 2, color: 'white', display: 'block' }}\n              >\n                {page.name}\n              </Button>\n            ))}\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n}\n","import React, { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport * as signalR from \"@microsoft/signalr\";\nimport env from \"react-dotenv\";\n\ninterface ServerSocketProps {\n  socket: signalR.HubConnection;\n  loading: boolean;\n}\n\nconst ServerSocketContext = createContext<ServerSocketProps>(null as any);\n\ninterface ServerSocketProviderProps {\n  children: ReactNode;\n}\n\nexport function ServerSocketProvider({children}: ServerSocketProviderProps) {\n  const ENDPOINT = `${env.API_URL}/socket`;\n  const [ loading, setLoading ] = useState(true);\n\n  const hubConnection = new signalR.HubConnectionBuilder()\n    .withUrl(ENDPOINT, {\n      skipNegotiation: true,\n      transport: signalR.HttpTransportType.WebSockets\n    })\n    .withAutomaticReconnect()\n    .build();\n\n  useEffect(() => {\n    if (hubConnection.state !== 'Connected') {\n      hubConnection.start().then(a => {\n        setLoading(false);\n      });\n    }\n  })\n\n  return (\n    <ServerSocketContext.Provider value={{socket: hubConnection, loading}}>\n      { children }\n    </ServerSocketContext.Provider>\n  )\n}\n\nexport default function useSocket() {\n  return useContext(ServerSocketContext);\n}\n","import { Box, CircularProgress } from '@mui/material';\nimport React, { ReactNode } from 'react';\n\ninterface LoadingProps {\n  loading: boolean;\n  error: Error | null;\n  children: () => ReactNode;\n}\n\nexport default function Loading( { loading, error, children }: LoadingProps) {\n  if (loading) {\n    return (\n      <Box m={4} textAlign=\"center\" >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box m={4} textAlign=\"center\">{error.message}</Box>\n    );\n  }\n\n  return <>{children()}</>;\n}","import { Container, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport Loading from \"../components/Loading\";\nimport useSocket from \"../contexts/ServerSocket\";\n\ninterface AverageData {\n  averageTemperature: string;\n  averageHumidity: string;\n  lastUpdate: string;\n}\n\nexport default function Home() {\n  const { socket: hubConnection } = useSocket();\n  \n  const [ averageData, setAverageData ] = useState<AverageData>({\n    averageTemperature: \"\",\n    averageHumidity: \"\",\n    lastUpdate: \"\"\n  });\n\n  useEffect(() => {\n    hubConnection.on(\"SetAverageData\", message => {\n      setAverageData(message);\n    });\n  });\n\n  useEffect(() => {\n    if (hubConnection.state === 'Connected') {\n      hubConnection.invoke(\"SendAverageData\");\n    }\n  });\n\n  return (<>\n    <Loading loading={averageData.lastUpdate === \"\"} error={null}>\n      {() => (<Container maxWidth=\"md\" sx={{display: 'flex', alignItems: 'center', flexFlow: 'column', marginTop: 3}}>\n        <Typography variant=\"h2\" gutterBottom component=\"div\" sx={{color: '#0d47a1'}}>\n          Sofia\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\n          Last update:\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\n          {averageData.lastUpdate}\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\n          Avg. Temperature\n        </Typography>\n        <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{fontWeight: 'bold', color: '#0d47a1'}}>\n          {averageData.averageTemperature} °C\n        </Typography>\n        <Typography variant=\"h5\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\n          Avg. Humidity\n        </Typography>\n        <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{fontWeight: 'bold', color: '#0d47a1'}}>\n          {averageData.averageHumidity} %\n        </Typography>\n        </Container>)}\n    </Loading>\n  </>);\n}\n","import { useEffect, useState } from \"react\";\n\ninterface AsyncState<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n}\n\nexport default function useAsync<T>(action: () => Promise<T>, dependencies: any[]) {\n  const [state, setState] = useState<AsyncState<T>>({\n    data: null,\n    loading: true,\n    error: null\n  });\n\n  const reload = () => {\n    let isCancelled = false;\n    (async function () {\n      try {\n        setState({data: null, loading: true, error: null});\n        const result = await action();\n\n        if (!isCancelled) {\n          setState({data: result, loading: false, error: null});\n        }\n      } catch (error: unknown) {\n        if (error instanceof Error && !isCancelled) {\n          setState({data: null, loading: false, error});\n        }\n      }\n    })();\n\n    return (() => {isCancelled = true;});\n  };\n\n  // eslint-disable-next-line\n  useEffect(reload, dependencies);\n\n  return {...state, reload};\n}\n","abstract class BaseError {\n  abstract name: string;\n\n  stack: string | undefined;\n\n  constructor(public message: string) {\n    this.stack = new Error().stack;\n  }\n}\n\nexport default class HttpError extends BaseError {\n  name: string;\n\n  constructor(response: Response, body: any) {\n    const message = body?.message || `Received status code ${response.status}`;\n\n    super(message);\n    this.name = body?.error.name || 'HttpError';\n  }\n}\n","import env from \"react-dotenv\";\nimport HttpError from \"../errors/HttpError\";\n\nclass HttpService {\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  get<T>(path: string) {\n    return this.request<T>(path, {\n      method: 'GET'\n    });\n  }\n\n  post<T>(path: string, body: {[key: string]: any}) {\n    return this.request<T>(path, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    });\n  }\n\n  private async request<T>(path: string, options: RequestInit): Promise<T> {\n    const response = await fetch(`${this.baseUrl}/${path}`, options);\n\n    if (!response.ok) {\n      throw new HttpError(response, await response.json());\n    }\n\n    const responseBody = response.json();\n\n    return responseBody\n  }\n}\n\nconst httpService = new HttpService(env.API_URL);\nexport default httpService;\n","import httpService from \"./HttpService\";\n\nexport interface LatestSensorReading {\n  averageHumidity: string;\n  averageTemperature: string;\n  lastUpdate: string;\n}\n\nexport interface Station {\n  dateCreated: string; // \"Monday, January 10, 2022\"\n  devAddr: string; // \"260BA563\"\n  joinEUI: string; //\"70B3D57ED0032B07\"\n  lastSeen: string; //\"2022-01-13T20:04:08.153\"\n  latitude: number; //43\n  longitude: number; //23\n  numberOfMessages: number; //1\n  stationID: string; //\"eui-a8610a3032306f09\"\n  stationName: string; //\"Station-1\"\n  supportedMeasurements: string; // \"breathVocEquivalent\", \"co2Equivalent\", \"humidity\", \"iaq\", \"iaqAccuracy\", \"pressure\", \"staticIaq\",\"temperature\"\n}\n\nexport interface Reading {\n  originID: string; //\"eui-a8610a3032306f09\"\n  payload: string; //\"{\\r\\n  \\\"breathVocEquivalent\\\": \\\"0.53\\\",\\r\\n  \\\"co2Equivalent\\\": \\\"517.50\\\",\\r\\n  \\\"humidity\\\": \\\"37.82\\\",\\r\\n  \\\"iaq\\\": \\\"35.02\\\",\\r\\n  \\\"iaqAccuracy\\\": \\\"0\\\",\\r\\n  \\\"pressure\\\": \\\"94928.00\\\",\\r\\n  \\\"staticIaq\\\": \\\"29.38\\\",\\r\\n  \\\"temperature\\\": \\\"20.61\\\"\\r\\n}\"\n  readingID: string; // \"b78655e0-5f8f-45f2-aede-1084cecd599a\"\n  timeOfCapture: Date; //\"2022-01-18T00:40:41.697\"\n}\n\nclass StationService {\n  async getStationReadings() {\n    return httpService.get<LatestSensorReading>('api/SensorReadings');\n  }\n\n  async getStationList() {\n    return httpService.get<Station[]>('api/GetStationList');\n  }\n\n  async getSensorReadingsWindowed(startDate: string, endDate: string, stationId: string) {\n    return httpService.get<Reading[]>(`api/StationSensorReadingsWindowed?startDate=${startDate}&endDate=${endDate}&stationId=${stationId}`);\n  }\n}\n\nconst stationService = new StationService();\nexport default stationService;\n","import React, { useEffect, useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport {\n  ArgumentAxis,\n  ValueAxis,\n  Chart,\n  LineSeries,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { ArgumentScale, ValueScale } from '@devexpress/dx-react-chart';\nimport { scaleLinear, scaleTime } from 'd3-scale';\nimport stationService, { Reading, Station } from '../services/StationService';\nimport useAsync from '../hooks/useAsync';\nimport Loading from './Loading';\n\ninterface ChartsProps {\n  stations: Station[];\n  typesOfMeasurement: string[];\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface StationReading {\n  station: Station;\n  readings: Reading[];\n  neededMeasurements: string[];\n}\n\nexport default function Charts({ stations, typesOfMeasurement, startDate, endDate }: ChartsProps) {\n  const { data: stationReadings, loading, error } = useAsync<StationReading[]>(async () => {\n    let stationReads = await Promise.all(stations.map(async (station) => {\n      const neededMeasurements = getSupportedMeasurements(station.supportedMeasurements).filter((measurement: any) => typesOfMeasurement.includes(measurement));\n      const readings = await stationService.getSensorReadingsWindowed(startDate.toISOString(), endDate.toISOString(), station.stationID);\n      return {\n        station,\n        readings,\n        neededMeasurements\n      }\n    }));\n\n    return stationReads;\n  }, [stations, typesOfMeasurement, startDate, endDate]);\n\n  function getSupportedMeasurements(measurements: string): any {\n    const result: any = JSON.parse(measurements);\n    return result;\n  }\n\n  const [chartData, setChartData] = useState<any[]>([]);\n  \n  useEffect(() => {\n    if (stationReadings) {\n      const data: any[] = [];\n      stationReadings.forEach((stationReading) => {\n        stationReading.readings.forEach((reading) => {\n          const payload = getSupportedMeasurements(reading.payload);\n          const neededResult: {[key: string]: any} = {};\n          stationReading.neededMeasurements.forEach((measurement) => {\n            neededResult[`${stationReading.station.stationID}-${measurement}`] = payload[measurement];\n          })\n          neededResult[\"timeOfCapture\"] = new Date(reading[\"timeOfCapture\"]);\n          data.push(neededResult);\n        })\n      });\n\n      setChartData(data);\n    }\n  }, [stationReadings]);\n\n  return (\n    <Loading loading={loading} error={error}>\n      {() => (chartData.length > 0 && <>\n    <Paper>\n      <Chart\n        data={chartData}\n      >\n        {typesOfMeasurement.map((type) => <ValueScale factory={scaleLinear} name={type} key={`scale-${type}`} />)}\n        {/* <ValueScale name=\"scale\" /> */}\n        <ArgumentScale factory={scaleTime} />\n        <ArgumentAxis />\n        {typesOfMeasurement.map((type) => <ValueAxis scaleName={type} showGrid={false} showLine={true} key={`axis-${type}`}/>)}\n        {/* <ValueAxis scaleName=\"scale\" position=\"right\" showGrid={false} showLine={true} showTicks={true} /> */}\n\n        {stationReadings && stationReadings.map((stationReading) => (\n          stationReading.neededMeasurements.map((measurement) => (\n            <LineSeries\n              name={`${stationReading.station.stationName}  ${measurement}`}\n              valueField={`${stationReading.station.stationID}-${measurement}`}\n              scaleName={measurement}\n              argumentField='timeOfCapture'\n              key={`${stationReading.station.stationName}  ${measurement}`}\n            />\n          )))).flat(1)}\n\n        <Legend position=\"bottom\" />\n      </Chart>\n    </Paper>\n      </>)}\n    </Loading>\n  );\n}\n","import { Box, Typography, List, ListItemButton, ListItemText, TextField, MenuItem, Button, Container, Stack } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport Loading from \"../components/Loading\";\nimport useSocket from \"../contexts/ServerSocket\";\nimport useAsync from \"../hooks/useAsync\";\nimport stationService, { Station } from \"../services/StationService\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Charts from \"../components/Charts\";\n\nexport default function Stations() {\n  const { data: stationList, loading, error } = useAsync(() => stationService.getStationList(), []);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [selectedMeasurment, setSelectedMeasurement] = useState(\"\");\n  const { socket: hubConnection } = useSocket();\n  const [ liveData, setLiveData ] = useState(\"\");\n  const [startDate, setStartDate] = useState<Date | null>(new Date());\n  const [endDate, setEndDate] = useState<Date | null>(new Date());\n  const [generatedChart, setGeneratedChart] = useState(false);\n  const [selectedMeasurementArray, setSelectedMeasurementArray] = useState<string[]>([]);\n  const [selectedStationArray, setSelectedStationArray] = useState<Station[]>([]); \n  \n  function getSupportedMeasurements(measurements: string): string[] {\n    const result: any = JSON.parse(measurements);\n    return result;\n  }\n\n  useEffect(() => {\n    hubConnection.on(\"SetLatestReading\", message => {\n      if (hubConnection.state === 'Connected' \n        && selectedIndex !== -1 \n        && stationList\n        && stationList[selectedIndex] \n        && selectedMeasurment !== \"\") {\n          const result: any = JSON.parse(message.payload);\n          setLiveData(result[selectedMeasurment]);\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (hubConnection.state === 'Connected' \n    && selectedIndex !== -1 \n    && stationList \n    && stationList[selectedIndex] \n    && selectedMeasurment !== \"\") {\n      hubConnection.invoke(\"SendLatestReading\", stationList[selectedIndex].stationID);\n    }\n  });\n\n  const handleListItemClick = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    index: number,\n  ) => {\n    setSelectedMeasurement(\"\");\n    setGeneratedChart(false);\n    setLiveData('');\n    setSelectedIndex(index);\n  };\n\n  const handleSelectMeasurment = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedMeasurement(event.target.value);\n    setGeneratedChart(false);\n    setLiveData('');\n  };\n\n  const handleClick = () => {\n    if (endDate && startDate && stationList && stationList[selectedIndex] && selectedMeasurment !== '') {\n      setGeneratedChart(true);\n      setSelectedMeasurementArray([selectedMeasurment]);\n      setSelectedStationArray([stationList[selectedIndex]]);\n    }\n  };\n\nreturn (<Container maxWidth=\"lg\">\n<Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1', marginTop: 2}}>\n  Stations\n </Typography>\n<Loading loading={loading} error={error}>\n   {() => (stationList && <Stack direction=\"row\" spacing={2} sx={{marginTop: 3, border: '1 solid gray.500', borderRadius: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', padding: 3}}>\n     <Stack direction=\"column\" spacing={3} sx={{marginTop: 2}}>\n        <List component=\"nav\">\n          {stationList?.map((station, index) => (\n            <ListItemButton\n              selected={selectedIndex === index}\n              onClick={(event) => handleListItemClick(event, index)}\n              key={station.stationID}\n            >\n              <ListItemText primary={station.stationName} />\n            </ListItemButton>))}\n        </List>\n       {stationList && selectedIndex!== -1 && <><LocalizationProvider dateAdapter={AdapterDateFns}>\n         <DatePicker\n           label=\"Start Date\"\n           value={startDate}\n           onChange={(newValue) => {\n             setGeneratedChart(false);\n             setStartDate(newValue);\n           }}\n           maxDate={endDate}\n           renderInput={(params) => <TextField {...params} />}\n         />\n         <DatePicker\n           label=\"End Date\"\n           value={endDate}\n           onChange={(newValue) => {\n             setGeneratedChart(false);\n             setEndDate(newValue);\n           }}\n           maxDate={new Date()}\n           minDate={startDate}\n           renderInput={(params) => <TextField {...params} />}\n         />\n       </LocalizationProvider>\n       <TextField\n          id=\"measurement\"\n          select\n          label=\"Select\"\n          value={selectedMeasurment}\n          onChange={handleSelectMeasurment}\n          helperText=\"Please select type of measurement\"\n        >\n          {getSupportedMeasurements(stationList[selectedIndex]!.supportedMeasurements).map((option) => (\n            <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </TextField>\n   <Button variant=\"outlined\" onClick={handleClick} disabled={generatedChart}>Generate Chart</Button>\n            </>}\n     </Stack>\n     <Box sx={{flexGrow: 1, display: 'flex', flexDirection: 'column'}}>\n     {selectedIndex !== -1 && stationList && stationList[selectedIndex] && selectedMeasurment !== \"\" && <>\n    <Loading loading={liveData === ''} error={null}>\n      {() => <>\n        <Typography variant=\"h4\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1'}}>\n          Live data: {liveData}\n        </Typography>\n      </>}\n    </Loading>\n    </>}\n    {generatedChart && <Box sx={{flexGrow: 1}}><Charts startDate={startDate!} endDate={endDate!} typesOfMeasurement={selectedMeasurementArray} stations={selectedStationArray}/></Box>}\n     </Box>\n   </Stack>)}\n</Loading>\n</Container>);\n}\n","import { TextField, Typography, MenuItem, Select, Box, SelectChangeEvent, OutlinedInput, InputLabel, FormControl, Button, Container, Stack } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport useAsync from \"../hooks/useAsync\";\nimport stationService from \"../services/StationService\";\nimport Loading from \"../components/Loading\";\nimport Chip from '@mui/material/Chip';\nimport { Theme, useTheme } from '@mui/material/styles';\nimport Charts from \"../components/Charts\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction onlyUnique(value: any, index: any, self: any) {\n  return self.indexOf(value) === index;\n}\n\nfunction getStyles(name: string, measurement: readonly string[], theme: Theme) {\n  return {\n    fontWeight:\n      measurement.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nexport default function History() {\n  const [startDate, setStartDate] = useState<Date | null>(new Date());\n  const [endDate, setEndDate] = useState<Date | null>(new Date());\n  const { data: stationList, loading, error } = useAsync(() => stationService.getStationList(), []);\n  const [ allMeasurements, setAllMeasurements ] = useState<string[]>([]);\n  const [selectedMeasurements, setSelectedMeasurements] = useState<string[]>([]);\n  const [generatedChart, setGeneratedChart] = useState(false);\n  const theme = useTheme();\n\n  function getSupportedMeasurements(measurements: string): string[] {\n    const result: any = JSON.parse(measurements);\n    return result;\n  }\n\n  const handleChange = (event: SelectChangeEvent<typeof selectedMeasurements>) => {\n    const {\n      target: { value },\n    } = event;\n    setGeneratedChart(false);\n    setSelectedMeasurements(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value,\n    );\n  };\n\n  const handleClick = () => {\n    if (endDate && startDate && stationList && stationList.length > 0 && selectedMeasurements.length > 0) {\n      setGeneratedChart(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!stationList || !stationList.length) {\n      return;\n    }\n\n    let measurements = stationList\n      .map((station) => getSupportedMeasurements(station.supportedMeasurements))\n      .flat(1)\n      .filter(onlyUnique);\n    \n    setAllMeasurements(measurements);\n  }, [stationList]);\n\n  return (<Container maxWidth=\"lg\">\n     <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" sx={{color: '#0d47a1', marginTop: 2}}>\n       History\n      </Typography>\n     <Loading loading={loading} error={error}>\n        {() => (<Stack direction=\"row\" spacing={2} sx={{marginTop: 3, border: '1 solid gray.500', borderRadius: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', padding: 3}}>\n          <Stack direction=\"column\" spacing={3} sx={{marginTop: 2}}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                label=\"Start Date\"\n                value={startDate}\n                onChange={(newValue) => {\n                  setGeneratedChart(false);\n                  setStartDate(newValue);\n                }}\n                maxDate={endDate}\n                renderInput={(params) => <TextField {...params} />}\n              />\n              <DatePicker\n                label=\"End Date\"\n                value={endDate}\n                onChange={(newValue) => {\n                  setGeneratedChart(false);\n                  setEndDate(newValue);\n                }}\n                maxDate={new Date()}\n                minDate={startDate}\n                renderInput={(params) => <TextField {...params} />}\n              />\n            </LocalizationProvider>\n            <FormControl sx={{width: 300 }}>\n              <InputLabel id=\"multiple-chip-label\">Type</InputLabel>\n              <Select\n                labelId=\"multiple-chip-label\"\n                id=\"multiple-chip\"\n                multiple\n                value={selectedMeasurements}\n                onChange={handleChange}\n                input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n                renderValue={(selectedMeasurements) => (\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                    {selectedMeasurements.map((value) => (\n                      <Chip key={value} label={value} />\n                    ))}\n                  </Box>\n                )}\n                MenuProps={MenuProps}\n              >\n              {allMeasurements.map((measurement) => (\n                <MenuItem\n                  key={measurement}\n                  value={measurement}\n                  style={getStyles(measurement, selectedMeasurements, theme)}\n                >\n                  {measurement}\n                </MenuItem>\n              ))}\n            </Select>\n        </FormControl>\n        <Button variant=\"outlined\" onClick={handleClick} disabled={generatedChart}>Generate Chart</Button>\n          </Stack>\n        {generatedChart && <Box sx={{flexGrow: 1}}><Charts startDate={startDate!} endDate={endDate!} typesOfMeasurement={selectedMeasurements} stations={stationList!}/></Box>}\n        </Stack>)}\n     </Loading>\n   </Container>);\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport { CssBaseline } from '@mui/material';\nimport { ServerSocketProvider } from './contexts/ServerSocket';\nimport Home from './pages/Home';\nimport Stations from './pages/Stations';\nimport History from './pages/History';\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ServerSocketProvider>\n        <CssBaseline />\n        <Header />\n        <Routes>\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/history\" element={<History />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"*\" element={<Navigate replace to=\"/home\" />} />\n        </Routes>\n      </ServerSocketProvider>\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}